# -*- coding: utf-8 -*-
"""Copy of Conditionalize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aEeKwzottXC_oLyf3H2MS2YjcCsRYYuv

## **Conditionalizing on the Evidence**

In Bayesian inference, we start with a probability distribution over a set of possible hypotheses (e.g., a patient might or might not have chicken pox). Next, we gather evidence (e.g., we check to see whether the patient has spots. Next, we update our probability distribution on the basis of
the evidence that we observe (using the likelihoods of the evidence given the various hypotheses).

**Note:** A probability distribution can be represented using a Python dictionary, such as chicken_prior = {'NOPOX': 0.9, 'POX': 0.1}. Likelihoods can be represented using a Python dictionary of dictionaries, such as chicken_spots_conditional = {'NOPOX': {'NOSPOTS': 0.999, 'SPOTS': 0.001}, 'POX': {'NOSPOTS': 0.2, 'SPOTS': 0.8}}. Note that chicken_spots_conditional[h][e] gives the (conditional) probability that e is the case given that h is the case. In other words, chicken_spots_conditional[h][e] equals P(e | h).

This assignment asks you to write two Python functions. The second of tthese functions this process of Bayesian inference. This assignment requires you to work from template code that I am providing. Please make a copy of this Colab file to edit and turn in.

In the **Chicken** Pox example, there are just two hypotheses that might be true. But your functions should place no restrictions on the number of possible hypotheses. Also, in the Chicken Pox example, there are just two pieces of evidence that might be observed. But your functions should place no restrictions on the number of possible pieces of evidence.

## Tips

- The only part of the code that you need to fill in are the blocks denoted by â€œYOUR CODE GOES HERE". If you wish, you can create additional helper functions. You can also add code to the program to test your functions. But do not change the existing function definitions as they must remain consistent for grading!
- In the template code, I give the probabilities in the "Expected Answer" rounded to 3 decimal places. You are not required to round the probabilities when you write your functions. In fact, it is better to just report the precise probabilities.
- Remember that you can add (key, value) pairs to a Python dictionary (dict) using the following syntax: dict[key] = value
- This notebook includes a couple of tests that you can use to check your work. But you might also want to creates some additional tests. For example, you might test your work using other examples of probabilistic inference that we have gone over in the lectures (such as the Monty Hall problem).
- Remember to use good coding practices (include comments, use meaningful names for variables, etc.).

## Turning in the Assignment

When you think that you have your code working, download it as a .py file and submit it to GradeScope. You will need to make sure to remove the "Copy of" prefix from the title before doing so. If you do not get full credit, you can revise your code and resubmit it to GradeScope as many times as you like before the due date.

If you have questions about getting your Python code to work, email the TA or the Instructor. And if you're contacting someone for help with code, it may be helpful to send them a shareable link to your Colab file to go over. You can also set up a time to go over your assignment in person or over Zoom.

The first function you will need to write is **total_prob_evid**. Basically, you are implementing the Law of Total Probability.

This function takes (a) an agent's prior probability distribution over a set of hypotheses and (b) the agent's likelihoods to determine the probability of a particular piece of evidence. Note that the set of hypotheses is a partition of the probability space.

Input

- prior: A prior probability distribution represented as a Python dictionary; prior[h] gives the (unconditional) probability that hypothesis h is true.
- conditional: A set of conditional probability distributions represented as a Python dictionary of dictionaries; conditional[h][e] gives the (conditional) probability that e is the evidence that is observed given that hypothesis h is true (i.e., conditional[h][e] equals P(e | h).
- evidence: A particular piece of evidence e.

Output

- total: The probability that evidence e is observed.
"""

def total_prob_evid(prior, conditional, evidence):
    total = 0

    # -------------------------------------------------------------------------
    # YOUR CODE GOES HERE
    #


    for hyp in prior:
      hypAndEv = prior[hyp] * conditional[hyp][evidence]
      total += hypAndEv


    #
    # END OF YOUR CODE
    # ------------------

    return total

"""The following code tests the 'total_prob' function using the **Chicken Pox** example. The patient either has chicken pox or they don't. In other words, these two hypotheses partition the probability space. We can use that partition to calculation the probability that the patient has spots.

"""

chicken_pox_prior = {"NOPOX": 0.9, "POX": 0.1}
chicken_pox_spots_conditional = {
    "NOPOX": {"NOSPOTS": 0.999, "SPOTS": 0.001},
    "POX": {"NOSPOTS": 0.2, "SPOTS": 0.8},
}

print("The doctor's prior regarding chicken pox is ", chicken_pox_prior)
print("")

prob_of_spots = total_prob_evid(
    chicken_pox_prior, chicken_pox_spots_conditional, "SPOTS"
)
print("My Answer:")
print("The probability of spots is", prob_of_spots)
print("")

print("Expected Answer:")
print("The probability of spots is 0.081")

"""The second function you will need to write is **create_conditionalized**. Basically, you are implementing Bayes's Theorem. Actually, you are implementing it several times; once for each hypothesis.

This function takes (a) an agent's prior probability distribution over a set of hypotheses, (b) the agent's likelihoods, and (c) a piece of evidence to determine a posterior probability distribution over the set of hypotheses.

Input

- prior: A prior probability distribution represented as a Python dictionary; prior[h] gives the (unconditional) probability that hypothesis h is true.
- conditional: A set of conditional probability distributions represented as a Python dictionary of dictionaries; conditional[h][e] gives the (conditional) probability that e is the evidence that is observed given that hypothesis h is true; i.e., conditional[h][e] equals P(e | h).
- evidence: A particular piece of evidence e that is observed.

Output

- posterior: A posterior probability distribution represented as a Python dictionary.

Note that you might want to call 'total_prob' when you implement 'conditionalize'. But you do not have to.

"""

def create_conditionalized(prior, conditional, evidence):
    posterior = {}

    # -------------------------------------------------------------------------
    # YOUR CODE GOES HERE
    #

    for hypothesis in prior:
      hypothesisUnconditional = prior[hypothesis]
      hypothesisEGivenH = conditional[hypothesis][evidence]
      posterior[hypothesis] = (hypothesisUnconditional * hypothesisEGivenH ) / total_prob_evid(prior, conditional, evidence)

    #
    # END OF YOUR CODE
    # ------------------

    return posterior

"""The following code tests the 'create_conditionalized' function using the **Chicken Pox** example. Basically, we inferring the probability of the patient having chicken pox based on the evidence that they have spots.

"""

chicken_pox_prior = {"NOPOX": 0.9, "POX": 0.1}
chicken_pox_spots_conditional = {
    "NOPOX": {"NOSPOTS": 0.999, "SPOTS": 0.001},
    "POX": {"NOSPOTS": 0.2, "SPOTS": 0.8},
}

print("The doctor's prior regarding chicken pox is ", chicken_pox_prior)
print("Suppose that the patient has spots.")
chicken_pox_posterior = create_conditionalized(
    chicken_pox_prior, chicken_pox_spots_conditional, "SPOTS"
)
print("")

print("My Answer:")
print("The doctor's posterior regarding chicken pox is", chicken_pox_posterior)
print("")

print("Expected Answer:")
print("The doctor's posterior regarding chicken pox is", {"NOPOX": 0.011, "POX": 0.989})

"""The following code tests the 'create_conditionalized' function using the case of inferring the probability that a **firefly** belongs to a particular species based on the evidence of color of the firefly's flash.

"""

firefly_prior = {"Good": 1 / 3, "Bad": 1 / 3, "Ugly": 1 / 3}
firefly_flash_conditional = {
    "Good": {"YELLOW": 1, "WHITE": 0},
    "Bad": {"YELLOW": 1, "WHITE": 0},
    "Ugly": {"YELLOW": 0, "WHITE": 1},
}

print("The male firefly's prior is ", firefly_prior)
print("Suppose that he sees a Yellow flash.")
firefly_posterior = create_conditionalized(
    firefly_prior, firefly_flash_conditional, "YELLOW"
)
print("")

print("My Answer:")
print("The male firefly's posterior is", firefly_posterior)
print("")

print("Expected Answer:")
print("The male firefly's posterior is", {"Good": 0.500, "Bad": 0.500, "Ugly": 0.000})

"""Answers to three of the quiz questions:

"""

small_pox_prior = {"NOPOX": 0.999, "POX": 0.001}
small_pox_test_conditional = {
    "NOPOX": {"NEG": 0.999, "POS": 0.001},
    "POX": {"NEG": 0.001, "POS": 0.999},
}

print("The doctor's prior regarding small pox is ", small_pox_prior)
print("Suppose that the patient tests positive.")
small_pox_posterior = create_conditionalized(
    small_pox_prior, small_pox_test_conditional, "POS"
)
print("The doctor's posterior regarding chicken pox is", small_pox_posterior)
print("")

# assume that the contestant picks Door #4
monty4_prior = {"DOOR1": 1 / 4, "DOOR2": 1 / 4, "DOOR3": 1 / 4, "DOOR4": 1 / 4}
monty4_conditional = {
    "DOOR1": {"OPEN1": 0, "OPEN2": 1 / 2, "OPEN3": 1 / 2, "OPEN4": 0},
    "DOOR2": {"OPEN1": 1 / 2, "OPEN2": 0, "OPEN3": 1 / 2, "OPEN4": 0},
    "DOOR3": {"OPEN1": 1 / 2, "OPEN2": 1 / 2, "OPEN3": 0, "OPEN4": 0},
    "DOOR4": {"OPEN1": 1 / 3, "OPEN2": 1 / 3, "OPEN3": 1 / 3, "OPEN4": 0},
}

print("The contestant's prior is ", monty4_prior)
print(
    "Suppose that the contestant picks Door #4 and that Monty opens Door #2 to reveal a goat."
)
monty4_posterior = create_conditionalized(monty4_prior, monty4_conditional, "OPEN2")
print("The contestant's posterior is", monty4_posterior)
print("")

firefly_prior = {"Good": 0.6313, "Bad": 0.18435, "Ugly": 0.18435}
firefly_conditional = {
    "Good": {"YELLOW": 1, "WHITE": 0},
    "Bad": {"YELLOW": 1, "WHITE": 0},
    "Ugly": {"YELLOW": 0, "WHITE": 1},
}

print("The male firefly's prior is ", firefly_prior)
print("Suppose that he sees a Yellow flash.")
firefly_posterior = create_conditionalized(firefly_prior, firefly_conditional, "YELLOW")
print("The male firefly's posterior is", firefly_posterior)